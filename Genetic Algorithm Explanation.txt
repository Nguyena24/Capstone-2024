This project is made on the basis of genetic algorithms and a self-made physics engine. A genetic algorithm is a way of problem solving done through AI. Essentially, genetic algorithms work through a process of natural selection. When presented with a problem the algorithm first attempts to solve the problem randomly and create a set of solutions that aren't necessarily optimal. For example, if somebody was ordering food off of a fast food menu and was limiting themselves to 3 items while also trying to get as many calories from their 3 items as possible, that person could input all the menu items along with the calorie values into a genetic algorithm. Initially, the algorithm could provide multiple different solutions but these would just be random options being thrown at the wall. This first set of solutions is regarded as Generation 0. Then, the best options within this generation are chosen through a fitness function which determines how "good" that specific solution is in regards to our optimal solution (in this scenario, the options with the highest calorie counts). These options then become the parents for the offspring of the next generation. However, each new solution provided with Generation 1 has a small mutation in which one value within the solution is changed (In this scenario it could be just choosing a different menu item). This process is then repeated until a satisfactory solution is provided. In summary, the Genetic Algorithm requires the user to submit a problem with certain guidelines such as optimal solutions, items being sorted, and details for each item. It then uses four functions: A fitness function to determine how accurate an option is to the solution, A selection function to choose the best options determined by the fitness function, a crossover/"breeding" function which crosses the best options to create the next generation, and a mutation function which provides small changes in an attempt to create more viable options. Overall, genetic algorithms are incredibly useful as this method can perform calculations thousands of times faster than a normal sorting algorithm that would just go through every possible option looking for the right one. A genetic algorithm could be very helpful in the creation of my project since I plan to make a realistic frisbee simulator through the use of my own physics engine, and a genetic algorithm could create the basis of said engine. In order to track/simulate the flight patterns of a frisbee in Unity, I would need to have x, y, and z values in a 3D plane. By using a genetic algorithm to tweak these values during flight and using Carter Horton's data on the flight patterns of a frisbee as the "solution," I could easily find the perfect values needed to create a physics engine that simulates realistic frisbee flight patterns such as a standard backhand throw. I could then expand this to different types of throws such as a forehand or hammer throw and log those differently.